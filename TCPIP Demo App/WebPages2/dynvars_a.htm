<meta http-equiv="refresh" content="120" >
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
        <head>
            <title>Solar Power Cube</title>
            <style>
                body { margin: 0; }
                canvas { width: 100%; height: 100% }
            </style>

            <a href="javascript:document.location.reload();"
               ONMOUSEOVER="window.status = 'Refresh';
                       return true"
               ONMOUSEOUT="window.status = 'Refresh Done.'">
                <img src="images/refresh.gif"
                     width="115" height="31" border="0" /></a>
		<script src="/mchp.js" type="text/javascript"></script>
        </head>
        <body>
            <script type="text/javascript" src="includes/three.min.js"></script>

            <script>
                   // 	We need several parameters to visualize the system operation
                   //	130     z	cube size 0,2000:  		changes the camera z to the absolute power log10 of the system and moves
		   //							a sprite bar in relationship to the cube.
                   //	131     mycolor	cube base color 0x000000:	green shades positive solar power in-flow, HTML HEX color codes,
		   //							red shades load power out-flow, blue shades positive charger power in-flow.
                   //	132     x	cube rotation speed 0,10:	solar voltage indicator
                   //	133     y	cube rotation speed 0,10:	solar or battery current indicator.

                   var scene, camera, renderer;
                   var geometry, material, mesh;
                   var mycolor=0x7f7f7f, cubez=1300,cubecolor=0x00,cubex=0,cubey=0,cube_update=false,cube_type;
		   var map = THREE.ImageUtils.loadTexture( "images/sprite.png" ); 
		   var material1 = new THREE.SpriteMaterial( { map: map, color: 0xffffff, fog: false } ); 
		   var sprite = new THREE.Sprite( material1 ); 


                   init();
                   animate();

                   function init() {

                       scene = new THREE.Scene();

                       camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
                       camera.position.z = 1000;

                       geometry = new THREE.BoxGeometry(200, 200, 200);



			sprite.position.set( 0, ~mbmcdata(130)~ - 150, 0 );// this sets up the data for other cube fuctions so it must be first
			sprite.scale.set( 500, 2, 1.0 ); // imageWidth, imageHeight
			scene.add( sprite );

                       material = new THREE.MeshBasicMaterial({color: 0x000000, wireframe: true});

                       mesh = new THREE.Mesh(geometry, material);
                       scene.add(mesh);

                       renderer = new THREE.WebGLRenderer();
                       renderer.setSize(window.innerWidth, window.innerHeight);

                       document.body.appendChild(renderer.domElement);
		       window.addEventListener( 'resize', onWindowResize, false );

			document.addEventListener( 'click', onDocumentMouseMove, false );
			setTimeout("newAJAXCommand('status.xml', updateCubeStatus, true)",100);
                 }

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );
			}


			function onDocumentMouseMove( event ) {

				cube_type= ~mbmcdata(135)~; // alternate cube display modes

			}

                   function animate() {

			if (cube_update) // dynamic updates from xml file
			{
                       		camera.position.z = cubez;
				sprite.position.set( 0, cubez - 150.0, 0 );
                       		mycolor = cubecolor;
                       		mesh.rotation.x += (0.03 * cubex);
                       		mesh.rotation.y += (0.03 * cubey);
			} else { // update on refresh
                       		camera.position.z = ~mbmcdata(130)~;
                       		mycolor = ~mbmcdata(131)~;
                       		mesh.rotation.x += (0.03 * ~mbmcdata(132)~);
                       		mesh.rotation.y += (0.03 * ~mbmcdata(133)~);
			}

                       mesh.material.color.setHex(mycolor);
                       requestAnimationFrame(animate);

                       renderer.render(scene, camera);
                   }

		// Parses the xmlResponse from status.xml and updates the cube status
		function updateCubeStatus(xmlData) {

			if(!xmlData)
			{
				return;
			}

			// Update the CUBE value
			cubez = getXMLValue(xmlData, 'cube0');
			cubecolor = getXMLValue(xmlData, 'cube1');
			cubex = getXMLValue(xmlData, 'cube2');
			cubey = getXMLValue(xmlData, 'cube3');
			cube_update=true;
		}

            </script>
        </body>
    </html>
