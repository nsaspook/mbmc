/**************************************************************
 * HTTPPrint.h
 * Provides callback headers and resolution for user's custom
 * HTTP Application.
 * 
 * This file is automatically generated by the MPFS Utility
 * ALL MODIFICATIONS WILL BE OVERWRITTEN BY THE MPFS GENERATOR
 **************************************************************/

#ifndef __HTTPPRINT_H
#define __HTTPPRINT_H

#include "TCPIP Stack/TCPIP.h"

#if defined(STACK_USE_HTTP2_SERVER)

extern HTTP_STUB httpStubs[MAX_HTTP_CONNECTIONS];
extern BYTE curHTTPID;

void HTTPPrint(DWORD callbackID);
void HTTPPrint_hellomsg(void);
void HTTPPrint_cookiename(void);
void HTTPPrint_builddate(void);
void HTTPPrint_led(WORD);
void HTTPPrint_btn(WORD);
void HTTPPrint_pot(void);
void HTTPPrint_uploadedmd5(void);
void HTTPPrint_snmp_en(void);
void HTTPPrint_read_comm(WORD);
void HTTPPrint_write_comm(WORD);
void HTTPPrint_status_fail(void);
void HTTPPrint_config_mac(void);
void HTTPPrint_config_hostname(void);
void HTTPPrint_config_dhcpchecked(void);
void HTTPPrint_config_ip(void);
void HTTPPrint_config_gw(void);
void HTTPPrint_config_subnet(void);
void HTTPPrint_config_dns1(void);
void HTTPPrint_config_dns2(void);
void HTTPPrint_reboot(void);
void HTTPPrint_rebootaddr(void);
void HTTPPrint_status_ok(void);
void HTTPPrint_smtps_en(void);
void HTTPPrint_ddns_status(void);
void HTTPPrint_ddns_status_msg(void);
void HTTPPrint_ddns_service(WORD);
void HTTPPrint_ddns_user(void);
void HTTPPrint_ddns_pass(void);
void HTTPPrint_ddns_host(void);
void HTTPPrint_mbmcdata(WORD);
void HTTPPrint_mbmchist1(WORD,WORD);
void HTTPPrint_mbmchist2(WORD,WORD);
void HTTPPrint_mbmchist3(WORD,WORD);
void HTTPPrint_mbmchist4(WORD,WORD);
void HTTPPrint_mbmchist5(WORD,WORD);

void HTTPPrint(DWORD callbackID)
{
	switch(callbackID)
	{
        case 0x00000000:
			HTTPIncFile((ROM BYTE*)"header.inc");
			break;
        case 0x00000001:
			HTTPPrint_hellomsg();
			break;
        case 0x00000002:
			HTTPIncFile((ROM BYTE*)"footer.inc");
			break;
        case 0x00000003:
			HTTPPrint_cookiename();
			break;
        case 0x00000005:
			HTTPPrint_builddate();
			break;
        case 0x00000006:
			HTTPPrint_led(7);
			break;
        case 0x00000007:
			HTTPPrint_led(6);
			break;
        case 0x00000008:
			HTTPPrint_led(5);
			break;
        case 0x00000009:
			HTTPPrint_led(4);
			break;
        case 0x0000000a:
			HTTPPrint_led(3);
			break;
        case 0x0000000b:
			HTTPPrint_led(2);
			break;
        case 0x0000000c:
			HTTPPrint_led(1);
			break;
        case 0x00000017:
			HTTPPrint_led(0);
			break;
        case 0x00000018:
			HTTPPrint_btn(0);
			break;
        case 0x00000019:
			HTTPPrint_btn(1);
			break;
        case 0x0000001a:
			HTTPPrint_btn(2);
			break;
        case 0x0000001b:
			HTTPPrint_btn(3);
			break;
        case 0x0000001c:
			HTTPPrint_pot();
			break;
        case 0x0000001d:
			HTTPPrint_uploadedmd5();
			break;
        case 0x0000001e:
			HTTPPrint_snmp_en();
			break;
        case 0x0000001f:
			HTTPPrint_read_comm(0);
			break;
        case 0x00000020:
			HTTPPrint_read_comm(1);
			break;
        case 0x00000021:
			HTTPPrint_read_comm(2);
			break;
        case 0x00000022:
			HTTPPrint_write_comm(0);
			break;
        case 0x00000023:
			HTTPPrint_write_comm(1);
			break;
        case 0x00000024:
			HTTPPrint_write_comm(2);
			break;
        case 0x00000025:
			HTTPPrint_status_fail();
			break;
        case 0x00000026:
			HTTPPrint_config_mac();
			break;
        case 0x00000027:
			HTTPPrint_config_hostname();
			break;
        case 0x00000028:
			HTTPPrint_config_dhcpchecked();
			break;
        case 0x00000029:
			HTTPPrint_config_ip();
			break;
        case 0x0000002a:
			HTTPPrint_config_gw();
			break;
        case 0x0000002b:
			HTTPPrint_config_subnet();
			break;
        case 0x0000002c:
			HTTPPrint_config_dns1();
			break;
        case 0x0000002d:
			HTTPPrint_config_dns2();
			break;
        case 0x0000002e:
			HTTPPrint_reboot();
			break;
        case 0x0000002f:
			HTTPPrint_rebootaddr();
			break;
        case 0x00000030:
			HTTPPrint_status_ok();
			break;
        case 0x00000031:
			HTTPPrint_smtps_en();
			break;
        case 0x00000032:
			HTTPPrint_ddns_status();
			break;
        case 0x00000033:
			HTTPPrint_ddns_status_msg();
			break;
        case 0x00000034:
			HTTPPrint_ddns_service(0);
			break;
        case 0x00000035:
			HTTPPrint_ddns_service(1);
			break;
        case 0x00000036:
			HTTPPrint_ddns_service(2);
			break;
        case 0x00000037:
			HTTPPrint_ddns_user();
			break;
        case 0x00000038:
			HTTPPrint_ddns_pass();
			break;
        case 0x00000039:
			HTTPPrint_ddns_host();
			break;
        case 0x0000003a:
			HTTPPrint_mbmcdata(0);
			break;
        case 0x0000003b:
			HTTPPrint_mbmcdata(1);
			break;
        case 0x0000003c:
			HTTPPrint_mbmcdata(2);
			break;
        case 0x0000003d:
			HTTPPrint_mbmcdata(3);
			break;
        case 0x0000003e:
			HTTPPrint_mbmcdata(10);
			break;
        case 0x0000003f:
			HTTPPrint_mbmcdata(11);
			break;
        case 0x00000043:
			HTTPPrint_mbmcdata(5);
			break;
        case 0x00000044:
			HTTPPrint_mbmcdata(7);
			break;
        case 0x00000045:
			HTTPPrint_mbmcdata(6);
			break;
        case 0x00000046:
			HTTPPrint_mbmcdata(9);
			break;
        case 0x00000047:
			HTTPPrint_mbmcdata(110);
			break;
        case 0x00000048:
			HTTPPrint_mbmcdata(111);
			break;
        case 0x00000049:
			HTTPPrint_mbmcdata(112);
			break;
        case 0x0000004a:
			HTTPPrint_mbmcdata(113);
			break;
        case 0x0000004b:
			HTTPPrint_mbmcdata(120);
			break;
        case 0x0000004c:
			HTTPPrint_mbmcdata(50);
			break;
        case 0x0000004d:
			HTTPPrint_mbmcdata(51);
			break;
        case 0x0000004e:
			HTTPPrint_mbmcdata(100);
			break;
        case 0x0000004f:
			HTTPPrint_mbmcdata(200);
			break;
        case 0x00000050:
			HTTPPrint_mbmcdata(14);
			break;
        case 0x00000051:
			HTTPPrint_mbmcdata(15);
			break;
        case 0x00000059:
			HTTPPrint_mbmchist1(0,0);
			break;
        case 0x0000005a:
			HTTPPrint_mbmchist1(1,0);
			break;
        case 0x0000005b:
			HTTPPrint_mbmchist1(2,0);
			break;
        case 0x0000005c:
			HTTPPrint_mbmchist1(3,0);
			break;
        case 0x00000065:
			HTTPPrint_mbmcdata(121);
			break;
        case 0x00000066:
			HTTPPrint_mbmchist1(5,0);
			break;
        case 0x00000067:
			HTTPPrint_mbmchist1(6,0);
			break;
        case 0x00000070:
			HTTPPrint_mbmcdata(122);
			break;
        case 0x00000071:
			HTTPPrint_mbmchist1(122,0);
			break;
        case 0x00000072:
			HTTPPrint_mbmchist1(123,0);
			break;
        case 0x00000073:
			HTTPPrint_mbmchist1(122,1);
			break;
        case 0x00000074:
			HTTPPrint_mbmchist1(123,1);
			break;
        case 0x00000075:
			HTTPPrint_mbmchist1(122,2);
			break;
        case 0x00000076:
			HTTPPrint_mbmchist1(123,2);
			break;
        case 0x00000077:
			HTTPPrint_mbmchist2(0,0);
			break;
        case 0x00000078:
			HTTPPrint_mbmchist2(1,0);
			break;
        case 0x00000079:
			HTTPPrint_mbmchist2(2,0);
			break;
        case 0x0000007a:
			HTTPPrint_mbmchist2(3,0);
			break;
        case 0x0000007b:
			HTTPPrint_mbmchist2(5,0);
			break;
        case 0x0000007c:
			HTTPPrint_mbmchist2(6,0);
			break;
        case 0x0000007d:
			HTTPPrint_mbmchist3(0,0);
			break;
        case 0x0000007e:
			HTTPPrint_mbmchist3(1,0);
			break;
        case 0x0000007f:
			HTTPPrint_mbmchist3(2,0);
			break;
        case 0x00000080:
			HTTPPrint_mbmchist3(3,0);
			break;
        case 0x00000081:
			HTTPPrint_mbmchist3(5,0);
			break;
        case 0x00000082:
			HTTPPrint_mbmchist3(6,0);
			break;
        case 0x00000083:
			HTTPPrint_mbmchist1(7,0);
			break;
        case 0x00000084:
			HTTPPrint_mbmchist2(7,0);
			break;
        case 0x00000085:
			HTTPPrint_mbmchist3(7,0);
			break;
        case 0x00000086:
			HTTPPrint_mbmcdata(16);
			break;
        case 0x00000087:
			HTTPPrint_mbmcdata(17);
			break;
        case 0x00000088:
			HTTPPrint_mbmcdata(18);
			break;
        case 0x00000089:
			HTTPPrint_mbmchist4(0,0);
			break;
        case 0x0000008a:
			HTTPPrint_mbmchist4(1,0);
			break;
        case 0x0000008b:
			HTTPPrint_mbmchist4(2,0);
			break;
        case 0x0000008c:
			HTTPPrint_mbmchist4(3,0);
			break;
        case 0x0000008d:
			HTTPPrint_mbmchist4(4,0);
			break;
        case 0x0000008e:
			HTTPPrint_mbmchist5(0,0);
			break;
        case 0x0000008f:
			HTTPPrint_mbmchist5(1,0);
			break;
        case 0x00000090:
			HTTPPrint_mbmchist5(2,0);
			break;
        case 0x00000091:
			HTTPPrint_mbmchist5(3,0);
			break;
        case 0x00000092:
			HTTPPrint_mbmchist5(5,0);
			break;
        case 0x00000093:
			HTTPPrint_mbmchist5(6,0);
			break;
        case 0x00000094:
			HTTPPrint_mbmchist5(4,0);
			break;
        case 0x00000095:
			HTTPPrint_mbmcdata(101);
			break;
        case 0x00000096:
			HTTPPrint_mbmcdata(21);
			break;
        case 0x00000097:
			HTTPPrint_mbmcdata(22);
			break;
        case 0x00000098:
			HTTPPrint_mbmcdata(201);
			break;
        case 0x00000099:
			HTTPPrint_mbmcdata(123);
			break;
        case 0x0000009a:
			HTTPPrint_mbmchist1(8,0);
			break;
        case 0x0000009b:
			HTTPPrint_mbmchist2(8,0);
			break;
        case 0x0000009c:
			HTTPPrint_mbmchist3(8,0);
			break;
        case 0x0000009d:
			HTTPPrint_mbmcdata(202);
			break;
        case 0x0000009e:
			HTTPPrint_mbmcdata(52);
			break;
        case 0x0000009f:
			HTTPPrint_mbmcdata(23);
			break;
        case 0x000000a0:
			HTTPPrint_mbmcdata(24);
			break;
        case 0x000000a1:
			HTTPPrint_mbmcdata(25);
			break;
        case 0x000000a2:
			HTTPPrint_mbmcdata(26);
			break;
        case 0x000000a3:
			HTTPPrint_mbmcdata(203);
			break;
        case 0x000000a4:
			HTTPPrint_mbmcdata(204);
			break;
        case 0x000000a5:
			HTTPPrint_mbmcdata(205);
			break;
        case 0x000000a6:
			HTTPPrint_mbmcdata(206);
			break;
        case 0x000000a7:
			HTTPPrint_mbmcdata(207);
			break;
        case 0x000000a8:
			HTTPPrint_mbmcdata(208);
			break;
        case 0x000000a9:
			HTTPPrint_mbmcdata(4);
			break;
        case 0x000000aa:
			HTTPPrint_mbmcdata(130);
			break;
        case 0x000000ab:
			HTTPPrint_mbmcdata(131);
			break;
        case 0x000000ac:
			HTTPPrint_mbmcdata(132);
			break;
        case 0x000000ad:
			HTTPPrint_mbmcdata(133);
			break;
        case 0x000000af:
			HTTPPrint_mbmcdata(135);
			break;
		default:
			// Output notification for undefined values
			TCPPutROMArray(sktHTTP, (ROM BYTE*)"!DEF", 4);
	}

	return;
}

void HTTPPrint_(void)
{
	TCPPut(sktHTTP, '~');
	return;
}

#endif

#endif
